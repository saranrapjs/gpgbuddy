package server

import (
	"testing"

	"google.golang.org/appengine/aetest"
	"google.golang.org/appengine/datastore"
)

const (
	myKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----

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
=Gjh5
-----END PGP PRIVATE KEY BLOCK-----`
)

func TestGetKey(t *testing.T) {
	ctx, done, err := aetest.NewContext()
	if err != nil {
		t.Fatal(err)
	}
	defer done()

	key := datastore.NewKey(ctx, "PrivateKey", "private_key", 0, nil)
	if _, err := datastore.Put(ctx, key, &PrivateKey{myKey}); err != nil {
		t.Fatal(err)
	}

	_, err = getKey(ctx)
	if err != nil {
		t.Error("err: ", err)
	}
}
